label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
)
),
mainPanel(plotlyOutput("Count")))
)
))
library(shiny)
library(shinydashboard)
library(ggplot2)
library(plotly)
shinyServer(function(input,output){
output$Count <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Year == input$Year) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Broad_Genre)) +
geom_bar(aes(fill = Rank_Group)))
})
})
shinyUI(dashboardPage(
dashboardHeader(title = "Comparison of Genre Billboard Performance By Year"),
dashboardSidebar(sidebarUserPanel("Davy Brostowitz"),
sidebarMenu(
menuItem(
"Genre Comparison by Year",
tabName = "Year",
icon = icon('year')
)
)),
dashboardBody(
titlePanel("Billboard Rankings by Genre & Year"),
sidebarLayout(sidebarPanel(
selectInput(
"Year",
label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
)
),
mainPanel(plotlyOutput("Count")))
)
))
shinyUI(dashboardPage(
dashboardHeader(title = "Comparison of Genre Billboard Performance By Year"),
dashboardSidebar(sidebarUserPanel("Davy Brostowitz"),
sidebarMenu(
menuItem(
"Genre Comparison by Year",
tabName = "Year",
icon = icon('year')
)
)),
dashboardBody(
titlePanel("Billboard Rankings by Genre & Year"),
sidebarLayout(sidebarPanel(
sliderInput(
"Year",
label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
)
),
mainPanel(plotlyOutput("Count")))
)
)))
shinyUI(dashboardPage(
dashboardHeader(title = "Comparison of Genre Billboard Performance By Year"),
dashboardSidebar(sidebarUserPanel("Davy Brostowitz"),
sidebarMenu(
menuItem(
"Genre Comparison by Year",
tabName = "Year",
icon = icon('year')
)
)),
dashboardBody(
titlePanel("Billboard Rankings by Genre & Year"),
sidebarLayout(sidebarPanel(
sliderInput(
"Year",
label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
)
),
mainPanel(plotlyOutput("Count")))
)
))))
shinyUI(dashboardPage(
dashboardHeader(title = "Comparison of Genre Billboard Performance By Year"),
dashboardSidebar(sidebarUserPanel("Davy Brostowitz"),
sidebarMenu(
menuItem(
"Genre Comparison by Year",
tabName = "Year",
icon = icon('year')
)
)),
dashboardBody(
titlePanel("Billboard Rankings by Genre & Year"),
sidebarLayout(sidebarPanel(
sliderInput(
"Year",
label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
)
),
mainPanel(plotlyOutput("Count")))
)
))
shinyServer(function(input,output){
output$Count <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Year == input$Year) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Broad_Genre)) +
geom_bar(aes(fill = Rank_Group)))
})
})
runApp()
shinyUI(dashboardPage(
dashboardHeader(title = "Comparison of Genre Billboard Performance By Year"),
dashboardSidebar(sidebarUserPanel("Davy Brostowitz"),
sidebarMenu(
menuItem(
"Genre Comparison by Year",
tabName = "Year",
icon = icon('year')
)
)),
dashboardBody(
titlePanel("Billboard Rankings by Genre & Year"),
sidebarLayout(sidebarPanel(
sliderInput(
"Year",
label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
),
selectInput(
"Genre",inputId = 'Genre',label = 'Genre',choices = unique(bill_board_data$Broad_Genre)
)
),
mainPanel(plotlyOutput("Count")))
)
))
runApp()
shinyServer(function(input,output){
output$Count <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Year == input$Year) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Broad_Genre)) +
geom_bar(aes(fill = Rank_Group)))
})
output$Genre <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Genre == input$Year) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Year)) +
geom_bar(aes(fill = Rank_Group)))
})
})
runApp()
runApp()
shinyUI(dashboardPage(
dashboardHeader(title = "Comparison of Genre Billboard Performance By Year"),
dashboardSidebar(sidebarUserPanel("Davy Brostowitz"),
sidebarMenu(
menuItem(
"Genre Comparison by Year",
tabName = "Year",
icon = icon('year')
)
)),
dashboardBody(
titlePanel("Billboard Rankings by Genre & Year"),
sidebarLayout(
sidebarPanel(
sliderInput(
"Year",
label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
),
selectInput(
"Genre",
inputId = 'Genre',
label = 'Genre',
choices = unique(bill_board_data$Broad_Genre)
)
),
mainPanel(plotlyOutput("Count"), plotlyOutput('Genre'))
)
)
))
bbdataclean
gg <- ggplot(data = bbdataclean, aes(x = year))
gg + geom_line()
g <- ggplot(data = bbdata17, aes(x = broad_genre))
bbdata17 = bbdataclean %>%
filter(., year == '2017')
bbdata17 = bbdataclean %>%
filter(., Year == '2017')
g <- ggplot(data = bbdata17, aes(x = broad_genre))
g + geom_bar(aes(color = Rank_Group))
bbdata17 = bbdataclean %>%
filter(., Year == '2017')
runApp()
runApp()
output$Genre <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Broad_Genre == input$Genre) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Year)) +
geom_bar(aes(fill = Rank_Group)))
})
shinyServer(function(input,output){
output$Count <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Year == input$Year) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Broad_Genre)) +
geom_bar(aes(fill = Rank_Group)))
})
output$Genre <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Broad_Genre == input$Genre) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Year)) +
geom_bar(aes(fill = Rank_Group)))
})
})
runApp()
shinyServer(function(input,output){
output$Count <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Year == input$Year) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Broad_Genre)) +
geom_bar(aes(fill = Rank_Group)))
})
output$Genre <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Broad_Genre == input$Genre) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Year)) +
geom_bar(aes(fill = Rank_Group)))
})
})
shinyUI(dashboardPage(
dashboardHeader(title = "Comparison of Genre Billboard Performance By Year"),
dashboardSidebar(sidebarUserPanel("Davy Brostowitz"),
sidebarMenu(
menuItem(
"Genre Comparison by Year",
tabName = "Year",
icon = icon('year')
)
)),
dashboardBody(
titlePanel("Billboard Rankings by Genre & Year"),
sidebarLayout(
sidebarPanel(
sliderInput(
"Year",
label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
),
selectInput(
"Broad_Genre",
inputId = 'Genre',
label = 'Genre',
choices = unique(bill_board_data$Broad_Genre)
)
),
mainPanel(plotlyOutput("Count"), plotlyOutput('Genre'))
)
)
))
runApp()
runApp()
runApp()
r
shinyServer(function(input,output){
output$Count <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Year == input$Year) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Broad_Genre)) +
geom_bar(aes(fill = Rank_Group)))
})
output$Genre <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Broad_Genre == input$Genre) %>%
ggplot(aes(x = Year)) +
geom_bar(aes(fill = Rank_Group)))
})
})
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(dashboardPage(
dashboardHeader(title = "Comparison of Genre Billboard Performance By Year"),
dashboardSidebar(sidebarUserPanel("Davy Brostowitz"),
sidebarMenu(
menuItem(
"Genre Comparison by Year",
tabName = "Year",
icon = icon('year')
)
)),
dashboardBody(fluidPage(
titlePanel("Billboard Rankings by Genre & Year"),
sidebarLayout(
sidebarPanel(
sliderInput(
"Year",
label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
),
selectInput(
"Genre",
inputId = 'Genre',
label = 'Genre',
choices = unique(bill_board_data$Broad_Genre)
)
),
mainPanel(fluidRow(
column(5,
plotlyOutput("Count")), column(7, plotlyOutput("Genre"))
))
)
))
))
runApp()
runApp()
runApp()
shinyServer(function(input,output){
output$Count <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Year == input$Year) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Broad_Genre)) +
geom_bar(aes(fill = Rank_Group)))
})
output$Genre <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Broad_Genre == input$Genre) %>%
ggplot(aes(x = Year)) +
geom_bar(aes(fill = Rank_Group)))
})
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bbdataclean
gg <- ggplot(data = bbdataclean, aes(x = Year, y = Peak_Position))
gg + geom_line()
gg <- ggplot(data = bbdataclean, aes(x = Year, y = Peak_Position))
gg + geom_point()
gg <- ggplot(data = bbdataclean, aes(x = Danceability, y = Peak_Position))
gg + geom_point(aes(color))
gg <- ggplot(data = bbdataclean, aes(x = Danceability, y = Peak_Position))
gg + geom_point()
gg <- ggplot(data = bbdataclean, aes(x = Danceability, y = Peak_Position))
gg + geom_point()
gg + geom_point(aes(alpha = .5, color = Broad_Genre))
gg + geom_density_2d(aes(alpha = .5, color = Broad_Genre))
gg <- ggplot(data = bbdataclean, aes(x = Danceability, y = Peak_Position))
gg + geom_density2d(aes(alpha = .5, color = Broad_Genre))
gg + geom_dotplot(aes(alpha = .5, color = Broad_Genre))
gg + geom_histogram(aes(alpha = .5, color = Broad_Genre))
gg + geom_histogram(aes(alpha = .5, color = Broad_Genre), binwidth = 1)
runApp()
shiny::runApp()
library(shiny)
library(shinydashboard)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyServer(function(input,output){
output$Count <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Year == input$Year) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Broad_Genre)) +
geom_bar(aes(fill = Rank_Group)))
})
})
shinyUI(dashboardPage(
dashboardHeader(title = "Comparison of Genre Billboard Performance By Year"),
dashboardSidebar(sidebarUserPanel("Davy Brostowitz"),
sidebarMenu(
menuItem(
"Genre Comparison by Year",
tabName = "Year",
icon = icon('year')
)
)),
dashboardBody(
titlePanel("Billboard Rankings by Genre & Year"),
sidebarLayout(sidebarPanel(
sliderInput(
"Year",
label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
)
),
mainPanel(plotlyOutput("Count")))
)
))
runApp()
runApp()
library(shiny)
library(shinydashboard)
shinyUI(dashboardPage(
dashboardHeader(title = "Comparison of Genre Billboard Performance By Year"),
dashboardSidebar(sidebarUserPanel("Davy Brostowitz"),
sidebarMenu(
menuItem(
"Genre Comparison by Year",
tabName = "Year",
icon = icon('year')
)
)),
dashboardBody(
titlePanel("Genre Billboard Performance by Year"),
sidebarLayout(
sidebarPanel(
sliderInput(
"Year",
label = "Year",
min = 2000,
max = 2017,
value = 2000,
sep = ""
)
),
mainPanel(plotlyOutput("Count"))
)
)
))
s
s
s
library(shiny)
library(shinydashboard)
library(ggplot2)
library(plotly)
shinyServer(function(input,output){
output$Count <- renderPlotly({
ggplotly(bill_board_data %>%
filter(.,Year == input$Year) %>%
arrange(., (Rank_Group)) %>%
ggplot(aes(x = Broad_Genre)) +
geom_bar(aes(fill = Rank_Group)))
})
})
runApp()
runApp()
bbdataclean
View(bbdataclean)
runApp()
